// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    // Structure to represent a voter
    struct Voter {
        bool hasVoted;
        uint256 votedProposalId;
    }

    // Structure to represent a proposal
    struct Proposal {
        string name;
        uint256 voteCount;
    }

    address public chairperson;
    mapping(address => Voter) public voters;
    Proposal[] public proposals;

    // Modifier to restrict access to the chairperson
    modifier onlyChairperson() {
        require(msg.sender == chairperson, "Only chairperson can call this function");
        _;
    }

    // Modifier to ensure the voter has not voted yet
    modifier hasNotVoted() {
        require(!voters[msg.sender].hasVoted, "You have already voted");
        _;
    }

    // Event emitted when a new proposal is added
    event ProposalAdded(string name);

    // Event emitted when a voter casts a vote
    event Voted(address indexed voter, uint256 proposalId);

    // Event emitted when the voting is closed, and the winner is declared
    event VotingClosed(uint256 winningProposalId);

    // Constructor to initialize the chairperson and add initial proposals
    constructor(string[] memory proposalNames) {
        chairperson = msg.sender;
        for (uint256 i = 0; i < proposalNames.length; i++) {
            proposals.push(Proposal({
                name: proposalNames[i],
                voteCount: 0
            }));
            emit ProposalAdded(proposalNames[i]);
        }
    }

    // Function to give the right to vote to an address
    function giveRightToVote(address voter) external onlyChairperson {
        require(!voters[voter].hasVoted, "Voter has already voted");
        voters[voter].hasVoted = false;
        voters[voter].votedProposalId = 0;
    }

    // Function to check if a proposal index is valid
    function validProposal(uint256 proposalId) internal view returns (bool) {
        return proposalId >= 0 && proposalId < proposals.length;
    }

    // Function to vote for a proposal
    function vote(uint256 proposalId) external hasNotVoted {
        require(validProposal(proposalId), "Invalid proposal ID");
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedProposalId = proposalId;
        proposals[proposalId].voteCount++;
        emit Voted(msg.sender, proposalId);
    }

    // Function to close the voting and declare the winner
    function closeVoting() external onlyChairperson {
        uint256 winningProposalId = 0;
        for (uint256 i = 1; i < proposals.length; i++) {
            if (proposals[i].voteCount > proposals[winningProposalId].voteCount) {
                winningProposalId = i;
            }
        }
        emit VotingClosed(winningProposalId);
    }
}
