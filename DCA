pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DecentralizedExchange {
    struct DCAPlan {
        address token;
        uint256 amount;
        uint256 interval;
        uint256 nextBuy;
    }

    mapping(address => uint256) public balances;
    mapping(address => DCAPlan) public dcaPlans;

    function deposit(uint256 amount, address token) public {
        ERC20(token).transferFrom(msg.sender, address(this), amount);
        balances[msg.sender] += amount;
    }

    function withdraw(uint256 amount, address token) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        ERC20(token).transfer(msg.sender, amount);
    }

    function setupDCAPlan(uint256 amount, uint256 interval, address token) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        dcaPlans[msg.sender] = DCAPlan(token, amount, interval, block.timestamp + interval);
    }

    function executeDCAPlan() public {
        DCAPlan storage plan = dcaPlans[msg.sender];
        require(block.timestamp >= plan.nextBuy, "Too early to buy");

        // Here you would add the logic to buy the token
        // This is a simplified example and doesn't actually implement DCA

        plan.nextBuy += plan.interval;
    }
}
